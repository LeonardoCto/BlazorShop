// <auto-generated />
using System;
using BlazorShop.Api.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlazorShop.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlazorShop.Api.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconCss")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconCss = "fas fa-spa",
                            Name = "Beauty"
                        },
                        new
                        {
                            Id = 2,
                            IconCss = "fas fa-tv",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 4,
                            IconCss = "fas fa-tshirt",
                            Name = "Clothing"
                        });
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Super Gloss of coconut",
                            ImageUrl = "Images/Beauty/Beauty.png",
                            Name = "Gloss",
                            Price = 100m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Red matte lipstick",
                            ImageUrl = "Images/Beauty/Lipstick.png",
                            Name = "Lipstick",
                            Price = 80m,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Liquid foundation for all skin tones",
                            ImageUrl = "Images/Beauty/Foundation.png",
                            Name = "Foundation",
                            Price = 120m,
                            Quantity = 70
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Vanilla fragrance perfume",
                            ImageUrl = "Images/Beauty/Perfume.png",
                            Name = "Perfume",
                            Price = 200m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "5G smartphone with OLED screen",
                            ImageUrl = "Images/Electronics/Smartphone.png",
                            Name = "Smartphone",
                            Price = 3500m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Ultrabook 16GB RAM 512GB SSD",
                            ImageUrl = "Images/Electronics/Laptop.png",
                            Name = "Laptop",
                            Price = 5500m,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Noise cancelling wireless headphones",
                            ImageUrl = "Images/Electronics/Headphones.png",
                            Name = "Headphones",
                            Price = 800m,
                            Quantity = 60
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Waterproof smartwatch with GPS",
                            ImageUrl = "Images/Electronics/Smartwatch.png",
                            Name = "Smartwatch",
                            Price = 1200m,
                            Quantity = 45
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            Description = "100% cotton white T-shirt",
                            ImageUrl = "Images/Clothing/TShirt.png",
                            Name = "T-Shirt",
                            Price = 60m,
                            Quantity = 200
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            Description = "Slim fit blue jeans",
                            ImageUrl = "Images/Clothing/Jeans.png",
                            Name = "Jeans",
                            Price = 180m,
                            Quantity = 120
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Description = "Leather jacket black",
                            ImageUrl = "Images/Clothing/Jacket.png",
                            Name = "Jacket",
                            Price = 350m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Description = "Running sneakers with foam sole",
                            ImageUrl = "Images/Clothing/Sneakers.png",
                            Name = "Sneakers",
                            Price = 400m,
                            Quantity = 70
                        });
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Leonardo coutinho"
                        });
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Cart", b =>
                {
                    b.HasOne("BlazorShop.Api.Entities.User", null)
                        .WithOne("Cart")
                        .HasForeignKey("BlazorShop.Api.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.CartItem", b =>
                {
                    b.HasOne("BlazorShop.Api.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorShop.Api.Entities.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Product", b =>
                {
                    b.HasOne("BlazorShop.Api.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.Product", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BlazorShop.Api.Entities.User", b =>
                {
                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
